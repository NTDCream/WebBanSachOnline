@model IEnumerable<WebBanSachOnline.Models.Order>

@{
    ViewBag.Title = "Index";
}


<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Quản lý đơn mua - Nhà Sách Online</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css"
          rel="stylesheet" />
    <!-- Font Awesome for icons -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
          rel="stylesheet" />
    <!-- Custom CSS -->
    <link href="~/Content/style.css" rel="stylesheet" />
</head>
<body>


    <!-- Main Content -->
    <div class="container-fluid mt-4">
        <div class="row">
            <div class="col-12 text-center mb-4">
                <h2 class="order-management-title">QUẢN LÝ ĐƠN MUA</h2>
            </div>
        </div>

        <!-- Danh sách đơn hàng -->
        <div class="card-header text-center">
            <h5 class="mb-0">Danh sách đơn hàng</h5>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered table-hover" style="text-align:center">
                    <thead class="table-light">
                        <tr>
                            <th>STT</th>
                            <th>Mã đơn hàng</th>
                            <th>Ngày tạo</th>
                            <th>Trạng thái</th>
                            <th>Tổng tiền</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody id="order-list">
                        <!-- Orders will be loaded here -->
                        @for (int i = 0; i < Model.Count(); i++)
                        {
                            var item = Model.ElementAt(i);
                            <tr>
                                <td>@(i+1)</td>
                                <td>@item.slug</td>
                                <td>@item.createdDate</td>
                                <td>
                                    @if (item.status.ToLower() == "paid")
                                    {

                                        <span class="badge bg-success">Đã thanh toán</span>
                                    }
                                    else if (item.status.ToLower() == "pending")
                                    {
                                        <span class="badge bg-warning text-dark">Chờ thanh toán</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger">Đã hủy</span>

                                    }
                                </td>
                                <td>@string.Format("{0:N0} đ", item.price)</td>
                                <td>
                                    <span>
                                        <a class="btn btn-sm btn-outline-primary" href="@Url.Action("Details", "Orders", new { slug = item.slug })">
                                            Xem chi tiết
                                        </a>
                                    </span>
                                    @*@if (((DateTime.Now - item.createdDate).TotalDays < 2) && (item.status.ToLower() == "pending"))
                                    {
                                        <span>
                                            <a class="btn btn-sm btn-outline-danger" href="@Url.Action("Delete", "Orders", new { slug = item.slug })">
                                                Hủy đơn
                                            </a>
                                        </span>
                                    }*@

                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>



    <!-- Cancel Order Confirmation Modal -->
    <div class="modal fade"
         id="cancelOrderModal"
         tabindex="-1"
         aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Xác nhận hủy</h5>
                    <button type="button"
                            class="btn-close"
                            data-bs-dismiss="modal"
                            aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p class="text-center">Bạn có muốn hủy đơn hàng này không?</p>
                    <div class="d-flex justify-content-center mt-4">
                        <button type="button"
                                class="btn btn-primary me-3"
                                id="confirm-cancel-btn">
                            Xác nhận
                        </button>
                        <button type="button"
                                class="btn btn-secondary"
                                data-bs-dismiss="modal">
                            Hủy bỏ
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <!-- Toast Container -->
    <div id="toast-container"
         class="position-fixed bottom-0 end-0 p-3"
         style="z-index: 1100">
        <!-- Toasts will be appended here -->
    </div>

    <!-- Bootstrap JS Bundle (includes Popper) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <!-- Custom JS -->
    @*<script src="~/Content/main..js"></script>*@
    <script>
        // Sample orders data (in a real app, this would come from an API)
        //const orders = [
        //  {
        //    id: "ORD001",
        //    date: "01/04/2025 10:30:25",
        //    items: [
        //      {
        //        id: 1,
        //        title: "63 Kinh thành",
        //        price: 120000,
        //        quantity: 1,
        //        image: "/api/placeholder/50/75",
        //        category: "Văn học",
        //      },
        //      {
        //        id: 3,
        //        title: "Đắc Nhân Tâm",
        //        price: 90000,
        //        quantity: 1,
        //        image:
        //          "https://nhasachphuongnam.com/images/detailed/217/dac-nhan-tam-bc.jpg",
        //        category: "Văn học",
        //      },
        //    ],
        //    total: 400000,
        //    status: "delivered",
        //  },
        //  {
        //    id: "ORD002",
        //    date: "01/04/2025 15:05:12",
        //    items: [
        //      {
        //        id: 4,
        //        title: "Chú Ruột Nhân Trần",
        //        price: 150000,
        //        quantity: 1,
        //        image: "/api/placeholder/50/75",
        //        category: "Văn học",
        //      },
        //    ],
        //    total: 390000,
        //    status: "processing",
        //  },
        //];

        let currentOrderId = null;

        // Load orders
        function loadOrders() {
            const orderList = document.getElementById("order-list");
            orderList.innerHTML = orders
                .map(
                    (order, index) => `
                  <tr class="order-row ${order.status === "processing"
                            ? "order-processing"
                            : order.status === "cancelled"
                                ? "order-cancelled"
                                : "order-delivered"
                        }" data-order-id="${order.id}">
                    <td class="text-center">${index + 1}</td>
                    <td>${order.id}</td>
                    <td>${order.date}</td>
                    <td>${getStatusText(order.status)}</td>
                    <td>${formatCurrency(order.total)}</td>
                    <td class="text-center">
                      <button class="btn btn-sm btn-outline-primary view-details-btn me-2" onclick="showOrderDetails('${order.id
                        }')">
                        <i class="fas fa-eye me-1"></i>Xem chi tiết
                      </button>
                      ${order.status === "processing"
                            ? `<button class="btn btn-sm btn-outline-danger" onclick="showCancelConfirmation('${order.id}')">
                              <i class="fas fa-times me-1"></i>Hủy đơn
                            </button>`
                            : ""
                        }
                    </td>
                  </tr>
                `
                )
                .join("");
        }

        // Show order details
        function showOrderDetails(orderId) {
            const order = orders.find((o) => o.id === orderId);
            if (!order) return;

            currentOrderId = orderId;

            // Fill modal with order details
            document.getElementById("detail-order-id").textContent = order.id;
            document.getElementById("detail-order-date").textContent = order.date;
            document.getElementById("detail-order-status").textContent =
                getStatusText(order.status);

            // Display or hide cancel button based on order status
            const cancelBtn = document.getElementById("cancel-order-btn");
            if (order.status === "processing") {
                cancelBtn.style.display = "block";
            } else {
                cancelBtn.style.display = "none";
            }

            // Order items
            const orderItems = document.getElementById("detail-order-items");
            orderItems.innerHTML = order.items
                .map(
                    (item, index) => `
                  <tr>
                    <td class="text-center">${index + 1}</td>
                    <td>
                      <img src="${item.image}" alt="${item.title
                        }" class="detail-item-image" width="40">
                    </td>
                    <td>${item.title}</td>
                    <td>${item.category}</td>
                    <td>${formatCurrency(item.price)}</td>
                    <td>${item.quantity}</td>
                    <td>${formatCurrency(item.price * item.quantity)}</td>
                  </tr>
                `
                )
                .join("");

            // Order total
            document.getElementById("detail-order-total").textContent =
                formatCurrency(order.total);

            // Show modal
            const modal = new bootstrap.Modal(
                document.getElementById("orderDetailsModal")
            );
            modal.show();
        }

        // Show cancel confirmation
        function showCancelConfirmation(orderId) {
            currentOrderId = orderId;
            const cancelModal = new bootstrap.Modal(
                document.getElementById("cancelOrderModal")
            );
            cancelModal.show();
        }

        // Cancel order button click
        document
            .getElementById("cancel-order-btn")
            .addEventListener("click", function () {
                // Hide details modal and show cancel confirmation
                const detailsModal = bootstrap.Modal.getInstance(
                    document.getElementById("orderDetailsModal")
                );
                detailsModal.hide();

                const cancelModal = new bootstrap.Modal(
                    document.getElementById("cancelOrderModal")
                );
                cancelModal.show();
            });

        // Confirm cancel button click
        document
            .getElementById("confirm-cancel-btn")
            .addEventListener("click", function () {
                if (!currentOrderId) return;

                // In a real app, this would be an API call
                const order = orders.find((o) => o.id === currentOrderId);
                if (order) {
                    order.status = "cancelled";

                    // Close the modal
                    const cancelModal = bootstrap.Modal.getInstance(
                        document.getElementById("cancelOrderModal")
                    );
                    cancelModal.hide();

                    // Show success message
                    showToast("Đơn hàng đã được hủy thành công!");

                    // Reload orders list
                    loadOrders();
                }
            });

        // Helper functions
        function getStatusText(status) {
            switch (status) {
                case "delivered":
                    return "Đã hoàn thành";
                case "processing":
                    return "Chờ thanh toán";
                case "cancelled":
                    return "Đã hủy";
                default:
                    return "Không xác định";
            }
        }

        // Initialize page
        document.addEventListener("DOMContentLoaded", function () {
            if (!isLoggedIn()) {
                window.location.href = "/pages/sign-in.html";
                return;
            }

            loadOrders();
            updateCartCount();

            // Update user name in nav and welcome
            const user = getLoggedInUser();
            if (user) {
                document.getElementById("user-name").textContent =
                    "Xin chào, " + user.name;
                document.getElementById("welcome-name").textContent = user.name;
            }

            // Setup row click handlers after orders are loaded
            setTimeout(() => {
                setupOrderRowClickHandlers();
                initTooltips();
            }, 100);
        });
    </script>
</body>
</html>
