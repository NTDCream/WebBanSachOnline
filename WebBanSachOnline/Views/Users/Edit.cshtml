@model WebBanSachOnline.Models.User
@{
    ViewBag.Title = "Infor";
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Tài khoản của tôi - Nhà Sách Online</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css"
          rel="stylesheet" />
    <!-- Font Awesome for icons -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
          rel="stylesheet" />
    <!-- Custom CSS -->
    <link href="~/Content/style.css" rel="stylesheet" />
    <style>
        .form-container {
            max-width: 720px;
            margin: 0 auto;
            padding: 30px;
            border: 1px solid #ddd;
            border-radius: 5px;
            background-color: #fff;
        }

            .form-container .form-control {
                padding-left: 45px !important;
            }

        .is-invalid {
            border-color: #dc3545;
        }

        .error-tooltip {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            z-index: 5;
        }

        .success-message {
            display: none;
            background-color: #fff;
            border: 1px solid #ddd;
            border-radius: 5px;
            text-align: center;
            padding: 40px 20px;
            margin-top: 20px;
        }

        /* Icon positioning within inputs */
        .form-container .position-relative i.fas {
            position: absolute;
            top: auto;
            bottom: 0;
            transform: translateY(-50%);
            margin-bottom: 4px;
            z-index: 5;
        }

        .btn-update {
            background-color: #0d6efd;
            color: white;
            border: none;
            padding: 8px 20px;
            border-radius: 5px;
            text-transform: uppercase;
            font-size: 14px;
        }
    </style>
</head>
<body>


    <!-- Main Content -->
    <div class="container mt-5">
        <h2 class="text-center mb-4">Thông tin tài khoản</h2>

        <div class="form-container">
            <!-- Single form with all fields -->
            @using (Html.BeginForm("Infor", "Users", FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                <input type="hidden"
                       class="form-control"
                       id="username"
                       name="username"
                       required
                       readonly
                       value="@Model.username" />

                <div class="mb-3 position-relative">
                    <label for="fullName" class="form-label">Họ tên</label>
                    <input type="text"
                           class="form-control"
                           id="fullName"
                           name="fullName"
                           value="@Model.fullName"
                           required />
                    <i class="fas fa-user position-absolute ms-3"
                       style="opacity: 0.5"></i>
                </div>

                <div class="mb-3 position-relative">
                    <label for="phone" class="form-label">Số điện thoại</label>
                    <input type="tel"
                           class="form-control"
                           id="phone"
                           name="phone"
                           value="@Model.phone"
                           required />
                    <i class="fas fa-phone position-absolute ms-3"
                       style="opacity: 0.5"></i>
                </div>

                <div class="mb-3 position-relative">
                    <label for="email" class="form-label">Email</label>
                    <input type="email"
                           class="form-control"
                           id="email"
                           name="email"
                           value="@Model.email"
                           required />
                    <i class="fas fa-envelope position-absolute ms-3"
                       style="opacity: 0.5"></i>
                </div>

                <div class="mb-3 position-relative">
                    <label for="address" class="form-label">Địa chỉ</label>
                    <input type="text"
                           class="form-control"
                           id="address"
                           name="address"
                           value="@Model.address"
                           required />
                    <i class="fas fa-map-marker-alt position-absolute ms-3"
                       style="opacity: 0.5"></i>
                </div>

                

                <div class="d-grid gap-2">
                    <button type="submit" class="btn-update">CẬP NHẬT</button>
                </div>
            }

            <!-- Password Reset Form (Hidden initially) -->
            <form id="password-form" style="display: none">
                <div class="mb-3 position-relative">
                    <label for="current-password" class="form-label">Mật khẩu hiện tại</label>
                    <input type="password"
                           class="form-control"
                           id="current-password"
                           placeholder="Mật khẩu hiện tại"
                           required />
                    <i class="fas fa-lock position-absolute ms-3"
                       style="opacity: 0.5"></i>
                </div>

                <div class="mb-3 position-relative">
                    <label for="new-password" class="form-label">Mật khẩu mới</label>
                    <input type="password"
                           class="form-control"
                           id="new-password"
                           placeholder="Mật khẩu mới"
                           required />
                    <i class="fas fa-key position-absolute ms-3"
                       style="opacity: 0.5"></i>
                    <div id="passwordHelpBlock" class="form-text">
                        Mật khẩu phải có ít nhất 6 ký tự.
                    </div>
                </div>

                <div class="mb-3 position-relative">
                    <label for="confirm-password" class="form-label">Xác nhận mật khẩu mới</label>
                    <input type="password"
                           class="form-control"
                           id="confirm-password"
                           placeholder="Xác nhận mật khẩu mới"
                           required />
                    <i class="fas fa-key position-absolute ms-3"
                       style="opacity: 0.5"></i>
                </div>

                <div class="d-grid gap-2">
                    <button type="submit" class="btn-update">CẬP NHẬT</button>
                </div>

                <div class="mt-3 text-center">
                    <a href="#account-info"
                       class="text-primary"
                       id="back-to-profile-link">Quay lại thông tin cá nhân</a>
                </div>
            </form>
        </div>

        <!-- Success Message (Hidden initially) -->
        <div id="success-message" class="success-message">
            <h3>Cập nhật thông tin thành công</h3>
            <div class="mt-4">
                <button id="confirm-btn" class="btn-update">XÁC NHẬN</button>
            </div>
        </div>
    </div>



    <!-- Toast Container -->
    <div id="toast-container"
         class="position-fixed bottom-0 end-0 p-3"
         style="z-index: 1100">
        <!-- Toasts will be appended here -->
    </div>

    <!-- Bootstrap JS Bundle (includes Popper) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <!-- Custom JS -->
    @*<script src="~/Content/main..js"></script>*@
    <script>
        // Function to show error message
        function showError(fieldId, message) {
            const field = document.getElementById(fieldId);

            // Add error class to input
            field.classList.add("is-invalid");

            // Check if there's already a tooltip icon within this container
            const container = field.closest(".position-relative");
            let tooltipIcon = container.querySelector(".error-tooltip");

            if (!tooltipIcon) {
                // Create new tooltip icon
                tooltipIcon = document.createElement("i");
                tooltipIcon.className =
                    "fas fa-exclamation-circle text-danger error-tooltip";
                tooltipIcon.setAttribute("data-bs-toggle", "tooltip");
                tooltipIcon.setAttribute("data-bs-placement", "right");

                // Append to container
                container.appendChild(tooltipIcon);
            }

            // Update tooltip message
            tooltipIcon.setAttribute("title", message);
            tooltipIcon.setAttribute("data-bs-original-title", message);

            // Dispose existing tooltip if any
            const existingTooltip = bootstrap.Tooltip.getInstance(tooltipIcon);
            if (existingTooltip) {
                existingTooltip.dispose();
            }

            // Initialize tooltip
            new bootstrap.Tooltip(tooltipIcon).show();
        }

        // Function to clear all error messages
        function clearErrorMessages() {
            // Remove all tooltips
            const tooltips = document.querySelectorAll(".error-tooltip");
            tooltips.forEach((el) => {
                const tooltip = bootstrap.Tooltip.getInstance(el);
                if (tooltip) {
                    tooltip.dispose();
                }
                el.remove();
            });

            // Remove is-invalid class from all inputs
            document.querySelectorAll(".is-invalid").forEach((el) => {
                el.classList.remove("is-invalid");
            });
        }

        // Show success message
        function showSuccessMessage() {
            document.querySelector(".form-container").style.display = "none";
            document.getElementById("success-message").style.display = "block";
        }

        // Hide success message and show form
        function hideSuccessMessage() {
            document.getElementById("success-message").style.display = "none";
            document.querySelector(".form-container").style.display = "block";
        }

        // Load user data
        function loadUserData() {
            const user = getLoggedInUser();
            if (!user) {
                window.location.href = "/pages/sign-in.html";
                return;
            }

            // Update profile name in the navigation
            document.getElementById("user-name").textContent =
                user.name || "Người dùng";

            // Fill form fields
            document.getElementById("username").value = user.username || "";
            document.getElementById("fullname").value = user.name || "";
            document.getElementById("email").value = user.email || "";
            document.getElementById("phone").value = user.phone || "";

            // Fill shipping address info if available
            if (user.address) {
                document.getElementById("address").value = user.address;
            }
        }

        // Handle profile form submission
        document
            .getElementById("profile-form")
            .addEventListener("submit", function (e) {
                e.preventDefault();
                clearErrorMessages();

                // Basic validation
                let isValid = true;
                const fullname = document.getElementById("fullname").value;
                const email = document.getElementById("email").value;
                const phone = document.getElementById("phone").value;
                const address = document.getElementById("address").value;

                if (!fullname) {
                    showError("fullname", "Vui lòng nhập họ tên.");
                    isValid = false;
                }

                if (!email) {
                    showError("email", "Vui lòng nhập email.");
                    isValid = false;



                    if (!phone) {
                        showError("phone", "Vui lòng nhập số điện thoại.");
                        isValid = false;
                    }

                    if (!address) {
                        showError("address", "Vui lòng nhập địa chỉ.");
                        isValid = false;
                    }

                    if (!isValid) return;

                    // Prepare form data
                    const formData = {
                        name: fullname,
                        email: email,
                        phone: phone,
                        address: address,
                    };

                    // In a real app, this would be an API call
                    // For demo, update local storage
                    const user = getLoggedInUser();
                    const updatedUser = { ...user, ...formData };
                    localStorage.setItem("user", JSON.stringify(updatedUser));

                    // Show success message
                    showSuccessMessage();
                });

        // Handle password form submission
        document
            .getElementById("password-form")
            .addEventListener("submit", function (e) {
                e.preventDefault();
                clearErrorMessages();

                // Basic validation
                let isValid = true;
                const currentPassword =
                    document.getElementById("current-password").value;
                const newPassword = document.getElementById("new-password").value;
                const confirmPassword =
                    document.getElementById("confirm-password").value;

                if (!currentPassword) {
                    showError("current-password", "Vui lòng nhập mật khẩu hiện tại.");
                    isValid = false;
                }

                if (!newPassword) {
                    showError("new-password", "Vui lòng nhập mật khẩu mới.");
                    isValid = false;
                } else if (newPassword.length < 6) {
                    showError("new-password", "Mật khẩu phải có ít nhất 6 ký tự.");
                    isValid = false;
                }

                if (!confirmPassword) {
                    showError("confirm-password", "Vui lòng xác nhận mật khẩu mới.");
                    isValid = false;
                } else if (newPassword !== confirmPassword) {
                    showError("confirm-password", "Mật khẩu xác nhận không khớp.");
                    isValid = false;
                }

                if (!isValid) return;

                // In a real app, this would be an API call to verify current password and set new one
                // For demo, just show success
                showSuccessMessage();

                // Reset form
                this.reset();
            });

        // Toggle between profile and password forms
        document
            .getElementById("password-change-link")
            .addEventListener("click", function (e) {
                e.preventDefault();
                document.getElementById("profile-form").style.display = "none";
                document.getElementById("password-form").style.display = "block";
            });

        document
            .getElementById("back-to-profile-link")
            .addEventListener("click", function (e) {
                e.preventDefault();
                document.getElementById("password-form").style.display = "none";
                document.getElementById("profile-form").style.display = "block";
            });

        // Handle confirm button on success message
        document
            .getElementById("confirm-btn")
            .addEventListener("click", function () {
                hideSuccessMessage();
            });

        // Initialize page
        document.addEventListener("DOMContentLoaded", function () {
            if (!isLoggedIn()) {
                window.location.href = "/pages/sign-in.html";
                return;
            }

            loadUserData();
        });
    </script>
</body>
</html>


